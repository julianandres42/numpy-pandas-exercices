# -*- coding: utf-8 -*-
"""Numpy_Excercises_Session_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gUmPfCMxb9G9ZXBZXzlCIgZV_dWI8C-f
"""

import numpy as np

"""# Numpy Excercises - Session 2

### Exercise 1

Reshape `array1` to 7x3 dimensions.
"""

array1 = np.arange(0, 21)
array1 = np.reshape(array1,(7,3))
array1

"""### Exercise 2

Reshape `array2` into a 3D array of 3x3x3 dimensions.
"""

array2 = np.arange(0, 27).reshape(9, 3)
array2
array2 = np.reshape(array2,(3,3,3))
array2

"""### Exercise 3: Reshape vs Resize

reshape and resize both do the same thin. So, what's the difference?

Follow the instructions and find out.
"""

# Run this cell without changing the code.
array3 = np.arange(0, 9)

array3.reshape((3, 3))
print(array3)

array3.resize((3, 3))
print(array3)

# Question: What is the difference between reshape and resize

a = "resize returns a new copy of the array, while reshape changes the original array"
b = "reshape returns a new copy of the array, while resize changes the original array"
c = "both resize and reshape works in the same way with the original array"
#test3()

"""### Exercise 4

Concatenate arrays `a`, `b`, and `c`.
"""

a = np.arange(0, 3)
b = np.arange(3, 6)
c = np.arange(6, 9)
array4 = np.concatenate((a,b,c))
array4

"""### Exercise 5

Concatenate arrays `m1` and `m2` vertically.
"""

m1 = np.array(
    [
      [1, 2, 3, 4],
      [5, 6, 7, 8]
    ]
)

m2 = np.array(
    [
      [9, 10, 11, 12],
      [13, 14, 15, 16]
    ]
)

array5 = np.concatenate((m1,m2)) 
array5

"""### Exercise 6

Concatenate arrays `m1` and `m2` horizontally.
"""

m1 = np.array(
    [
      [1, 2, 3, 4],
      [5, 6, 7, 8]
    ]
)

m2 = np.array(
    [
      [9, 10, 11, 12],
      [13, 14, 15, 16]
    ]
)

array6 = np.concatenate((m1,m2),axis=1)
array6

"""### Exercise 7

Get all the cells with value equals to `0` as a list of tuples.
"""

matrix = np.array([
    [1, 4, 7, 5, 0],
    [0, 2, 9, 0, 1],
    [3, 6, 0, 5, 3],
    [7, 3, 0, 1, 0],
    [3, 6, 1, 0, 4]
])
print(matrix)
zeroTuples = np.where(matrix==0)
list1 = zeroTuples[0]
list2 = zeroTuples[1]
print(list1)
print(list2)
merged_list = [(list1[i], list2[i]) for i in range(0, len(list1))] 
print(merged_list)

"""### Exercise 8

Check the documentation for `np.diag` and `np.fliplr`. Use them to extract the diagonals arrays for `matrix`.
"""

diag1 = np.diag(matrix)
print(diag1)
matrix2 = np.fliplr(matrix) 
print(matrix2)
diag2 = np.diag(matrix2)
print(diag2)

"""### Exercise 9

Get the values of the 3th column in `matrix` and the values for the 2th row in `matrix`. Both as numpy arrays.
"""

column = np.asarray(matrix[:,2])
print(column)
row = np.asarray(matrix[1,:]) 
print(row)
#testRow(row)

"""## Exercise 10

Create a new matrix ***x*** from ***a*** and ***m*** with the folowing structure:



```
array([[4, 4, 5, 4, 4],
       [4, 4, 5, 4, 4],
       [4, 4, 5, 4, 4]])
```
"""

a = np.full((3, 1), 5)
m = np.full((3, 4), 4)
print(a)
print(m)
arrays = np.hsplit(m,2)
print(arrays)
side1 = arrays[0]
side2 = arrays[1]
print(side1)
step1 = np.concatenate((side1,a,side2),axis=1)
print(step1)

"""## Exercise 11

Given a:

```
a = array([[1],
       [1],
       [2],
       [4]])
```

Create a new array **b** with the following structure:

```
np.array([
  [1, 0, 0],
  [1, 0, 0],
  [0, 1, 0],
  [0, 0, 1],
])
```
Do you detect the pattern? Which operation do you need to create this structure.?
"""

# one hot encode excersise for numpy

"""# Challenge, Tic Tac Toe"""

cell = {
    0: ' ',
    1: 'X',
    2: 'O'
}

def print_board():
  print('-------------')
  print(f'| {cell[game[0][0]]} | {cell[game[0][1]]} | {cell[game[0][2]]} |')
  print('-------------')
  print(f'| {cell[game[1][0]]} | {cell[game[1][1]]} | {cell[game[1][2]]} |')
  print('-------------')
  print(f'| {cell[game[2][0]]} | {cell[game[2][1]]} | {cell[game[2][2]]} |')
  print('-------------')

def skynet_move():
  import random as ran
  zeroCoordinates = np.where(game==0)
  if len(zeroCoordinates) == 0:
    pass
  availableRows = zeroCoordinates[0]
  availableColumns = zeroCoordinates[1]
  merged_cords = [(availableRows[i], availableColumns[i]) for i in range(0, len(availableRows))]
  r = ran.randint(0,len(zeroCoordinates)-1)
  tupleSelected = merged_cords[r]
  game[tupleSelected[0]][tupleSelected[1]] = 2
  

def win_move(player, r, c):
  if np.all(np.array(game[r,:]) == player):
    return True
  winnerColumn = game[:,c]
  if np.all(np.array(game[:,c]) == player):
    return True
  if np.all(np.diag(game) == player) :
    return True
  matrix2 = np.fliplr(game)
  if np.all(np.diag(matrix2) == player):
    return True
    pass


def human_move(r, c):
  if game[r][c] == 0:
    game[r][c] = 1
    return True
  else:
    print('Cell is not empty')
    return False  
  pass

def winner_exists():
  diag1 = np.diag(game)
  matrix2 = np.fliplr(game)
  diag2 = np.diag(matrix2)
  if game[:,0] == 1 or  game[:,1] == 1 or  game[:,2] == 1 or game[:,0] == 2 or game[:,1] == 2 or  game[:,2] == 2 or diag == 1 or diag == 2  or diag2 == 1 or  diag2 == 2 :
    return True
  else:
    return False  
  pass


def is_game_on():
  zeroCoordinates = np.where(game==0)
  if len(zeroCoordinates) > 0 or not winner_exists():
    return True
  else:
    return False 
  pass

# Run this cell to restart the game.

# Create a 3x3 array with zero values.
game = np.full((3,3),0)

#@title Tic tac toe controls
#@markdown Select the cell for your next move!.
row_value = "2" #@param ["0", "1", "2"] 
column_value = "2" #@param ["0", "1", "2"]

row = int(row_value)
column = int(column_value)
if(is_game_on()):
  status = human_move(row, column)
  if(win_move(1, row, column)):
    print('Human wins')
  elif(status):
    skynet_move()
    if(win_move(2, row, column)):
      print('Skynet wins')
else:
  print('Game over.')
  
print_board()

"""# Challenge: Basic data analysis

The following numpy array is taken from the a census dataset. Every column in this matrix contains some demografic information. For this exercise You will focus in the following columns:

*   Column[0]: Age
*   Column[1]: workclass
*   Column[3]: education
*   Column[5]: marital-status
*   Column[9]: sex
*   Column[10]: capital-gain

Please find the following information:


*   Age average
*   Types of workclass, education and marital-status
*   How many records are for male
*   How many records are for female
*   How many females are above age of 30
*   Avergage of capital-gain for males
*   Avergage of capital-gain for females
"""

# First upload file "census.npy" befor running this cell.
with open('/census.npy', 'rb') as f:
  census_data = np.load(f, allow_pickle=True)
census_data

print('Age average')
print(np.mean(census_data[:,0]))
print('Types of work class')
print(np.unique(census_data[:,1]))
print('Types of education')
print(np.unique(census_data[:,3]))
print('Types of marital status')
print(np.unique(census_data[:,5]))
print(np.unique(census_data[:,9]))
print('Number of records for male')
print(len(np.where(np.char.strip(census_data[:,9].astype(str))=='Male')[0]))
print('Number of records for female')
print(len(np.where(np.char.strip(census_data[:,9].astype(str))=='Female')[0]))
females = census_data[np.char.strip(census_data[:,9].astype(str))=='Female']
print('Number of females above age 30')
print(len(females[females[:,0].astype(int)>30]))
males = census_data[np.char.strip(census_data[:,9].astype(str))=='Male']
print('Avergage of capital-gain for males')
print(np.average(males[:,10].astype(int)))
print('Avergage of capital-gain for females')
print(np.average(females[:,10].astype(int)))

